day01

https://us06web.zoom.us/rec/share/K1j7NJZkc-8POsYqu30osGQBx6MGrRAvV3RHju7Js1ZdBJGBREEtWKAwEqGOORbY.GsHrJZ6MKgB9u_d9
암호: L%DQdM2&

1. OT
C언어/자료구조 4시간 * 6일 * 2 = 48H

구글 클래스룸
구글 로그인 -> "클래스룸" 검색 -> 오른쪽 위 + 버튼 -> 수업 참여하기
-> 수업 코드 nfihhch


2. Visual Studio 2022 설치

1) https://visualstudio.microsoft.com/ko/ 접속
2) 가운데 다운로드 클릭
3) 다운로드 된 파일 열기 -> VS Installer 계속 선택
4) Visual Studio Community 2022 설치
5) C++를 사용한 데스크톱 개발 체크 -> 다운로드하는 동안 설치


3. C언어
- 프로그래밍 언어 중 가장 기본 언어

- 임베디드 프로그래밍 (아두이노)
- 모바일 프로그래밍 (iOS)
- PC 운영체제에서 사용


4. 프로그래밍 
프로그램 코딩 : 소스코드를 코딩한다 ~> [.c] => 소스 파일
컴파일 과정 : 작성된 .c 파일을 컴파일러가 기계어로 변환 ~> [.obj] => 목적 파일 (오브젝트 파일)
링크 과정 : 여러 파일들을 링커가 하나로 합침 ~> [.exe] => 실행 파일
파일 실행 : .exe 파일

Visual Studio IDE -> Integrated Development Environment (통합 개발환경)

컴파일러의 종류
- 표준 C/C++ 컴파일러 : GCC, G++
- 비표준 C/C++ 컴파일러 : Visual C++ (MS사), Borland C++, Turbo C++...


5. 기본 C언어 구조

// Code01_Start.c
#include <stdio.h>
  -> stdio.h 파일 포함한다
  -> std: standard 표준   io: input/output 입력/출력
     .h: header 헤더파일

int main()
  -> int: integer 정수   
     main(): main 함수 -> C언어 프로그램의 시작 지점 (starting point)

{
  -> 중괄호: main 함수의 범위를 지정

	// C언어 프로그래밍
	  -> 주석 (comment): 코드에 댓글=설명을 다는 기능	
	  -> // 뒤에 있는 모든 글씨는 실행되지 않는다(컴파일러가 무시)

	int a = 10;
	  -> int: 정수   a: 변수이름   =: 등호(대입연산자)
	     10: 수    ;: 코드 한 줄(문장)의 끝을 표현

	printf("Hello World %d\n", a);
	  -> printf 함수 안에 매개변수가 있다
	     print(출력) + format(형식)

	return 0;
	  -> return 돌려준다 -> main 함수에 한정해서 돌려주는 값은 에러 코드
	  -> 0: 에러가 없다

}


6. 입력 함수

scanf("%d %d", &a, &b);
-> scan(입력), format(형식) -> 형식에 맞춘 입력을 수행하는 함수
-> &a -> a 변수의 메모리 주소

VS에서는 scanf() 함수 대신 scanf_s() 함수를 권장 (Visual C++ 비표준)
-> scanf 함수에는 보안 취약점이 있기 때문에 VS에서는 이를 해결한 scanf_s를 쓰라고 권장

VS에서 scanf()를 사용하려면
#define _CRT_SECURE_NO_WARNINGS 코드를 추가


Code03_Example1.c

수 2개를 입력받아 두 수의 순서를 거꾸로 출력
입력: 1 2
출력: 2 1


7. 자료형 (data type)
데이터들의 다양한 종류 -> 자료형 (data type)

메모리 주소 -> 64비트 0...0 (64개) ~ 1...1 (64개)
8 비트(bit) -> 1 바이트(byte)
비트 -> 0, 1 표현
바이트 -> 0...0 (8개) ~ 1...1 (8개) -> 0 ~ 255 (10진수)

정수(integer)형
- short	-> 2바이트 0...0 (16개) ~ 1...1 (16개)
	-> 0 ~ 65535 -> -32768 ~ 32767
- int	-> 4바이트 0...0 (32개) ~ 1...1 (32개) 
	-> 0 ~ 42억 -> -21억 ~ 21억
- long	-> 8바이트 -> 0 ~ 1844경 -> -922경 ~ 922경
- (int128 -> 128개)

실수(floating point -> 부동소수점)형
- float	-> 4바이트 -> +-1.7 * 10 ^ 34
- double-> 8바이트 -> +-3.4 * 10 ^ 304

문자(character)형
- char	-> 1바이트 -> -128 ~ 127
  -> 키보드 위의 알파벳+숫자+기호+기능키 -> ASCII 코드
     'A':65  'a':97  '0':48  ' ':32  줄바꿈:10  엔터키:13
  -> 한글을 char+char로 조합하여 표현 2~3바이트
     '가': 44032
  (Java 언어 char 2바이트 -> Unicode 코드) 

+논리(boolean)형 (C++ 표준, C언어에서는 추가기능)
- bool => #include <stdbool.h>를 추가하면 사용 가능
  -> 참(true)/거짓(false)
  -> 0, 1만 표현하니까 1비트일거 같은데 1바이트 -> 7/8 낭비


8. 서식 지정자 (format specifier)

정수형
%d: 10진수 정수 (decimal)		int -> -21억 ~ 21억
%u: 부호가 없는 10진수 정수 (unsigned) unsigned int -> 0 ~ 42억
%lld: 부호가 있는 10진수 long	long long -> -922경 ~ 922경
%llu: 부호가 없는 10진수 long	unsigned long long ->
%o: 부호가 없는 8진수 정수 (octal)
%x: 부호가 없는 소문자 16진수 (hexadecimal)
%X: 부호가 없는 대문자 16진수
%p, %P: 메모리 주소를 16진수 (pointer)

실수형
%f: 소수점 형태의 실수 (float)	float
%lf: double 형 (long float)	double
0.00000 00000 00000 00000 035  ~~> 3.5*10^-16
%e: 과학적 표현식 = 지수형태 (exponential) -> 3.5e-16
%E: 지수형태 대문자 -> 3.5E-16
%g: %e와 %f 중 짧은 것 표현
   %f 0.000062 (8칸)  %e 6.2e-5 (6칸)  %g 6.2e-5
   %f 3.7 (3칸)  %e 3.7e0 (5칸) %g 3.7
%G: %E와 %f 중 짧은 것 표현

문자형
%c: 문자(character) char
%s: 문자열(string)

%%: 퍼센트 출력


서식지정자 자릿수 지정

정수형
%d	-> 일반 출력
%nd	-> n자리 기준 오른쪽 정렬
%0nd	-> n자리 기준 오른쪽 정렬을 하되, 빈 칸에 0을 채운다
%-nd	-> n자리 기준 왼쪽 정렬

"%d", 123 	-> "123"
"%7d", 123 	-> "    123"
"%07d", 123	-> "0000123"
"%-7d", 123	-> "123    "


실수형
%f	-> 일반 출력 (소수점 6자리까지 출력)
%nf	-> n자리 기준 오른쪽 정렬 (소수점 6자리)
%.mf	-> 소수점 m자리까지 출력 (반올림)
%n.mf	-> 위 두 개 합친 것

"%f", 123.456	-> "123.456000"
"%.2f", 123.456	-> "123.46"
"%10.1f", 123.456  -> "     123.5"
"%010.1f", 123.456 -> "00000123.5"

문자형
%s 	-> 기본 출력
%ns, %-ns

"%8s", "Hello" 	-> "   Hello"
"%-8s", "Hello"	-> "Hello   "


9. 탈출 문자 (escape character)
-> 백슬래시(원화 표시)가 붙는 특수 문자

\n -> new line 줄바꿈(=엔터키)
\t -> horizontal tab 가로탭(=탭키)
\b -> backspace 하나지우기(=백스페이스키)
\r -> carriage return 줄의 맨 앞 이동(=홈키)
\a -> alert 비프음 출력
\\ -> \ 1개 출력


예제2. 아래 값들을 출력해봅시다.
Code06_Example2.c

char a = 'A';
char b = 'a';
double c = 56.789012;
int d = 30;

<출력>
A, 65
a, f, z
56.789, 000000030


10. 진수 변환

10진수 67 -> 16진수, 8진수
10진수 111 -> 16진수, 8진수

67 / 16 = 4 ... 3
 4 / 16 = 0 ... 4
-> 67은 16진수로 0x43이다.

67 / 8 = 8 ... 3
 8 / 8 = 1 ... 0
 1 / 8 = 0 ... 1
-> 67은 8진수로 0103이다.

111 / 16 = 6 ... 15 = F
  6 / 16 = 0 ... 6
-> 111은 16진수로 0x6F이다.

111 / 8 = 13 ... 7
 13 / 8 =  1 ... 5
  1 / 8 =  0 ... 1
-> 111은 8진수로 0157이다.


윈도우 + R -> calc -> 엔터
-> 프로그래머용, HEX 16진수 DEC 10진수 OCT 8진수 BIN 2진수

Code07_BaseConverter.c
int a, b;
1) scanf를 이용해 a와 b에 입력을 받습니다.
  a: 수, b: 진수
a = 111, b = 8
2) 진수 나누기를 5번 수행
실제로 111/8 = 13.875
printf("%d %d", a/b, a%b); -> 13 7
a = a / b; // a가 13으로 변경
.....

111 8
111 / 8 = 13 ... 7
13 / 8 = 1 ... 5
1 / 8 = 0 ... 1
0 / 8 = 0 ... 0
0 / 8 = 0 ... 0


Code08_BaseConverter2.c
16진수 입력: FF
10진수 변환 값은 255입니다.
8진수 변환 값은 377입니다.

8진수 입력: 77
10진수 변환 값은 63입니다.
16진수 변환 값은 3F입니다.


Code09_HexCalculator.c

16진수 첫 번째 수 입력: A1
16진수 두 번째 수 입력: 3C
덧셈: A1 + 3C =     DD
뺄셈: A1 - 3C =     65
곱셈: A1 * 3C =   25BC
몫: A1 / 3C =      2

출력 값은 전부 16진수
결과값은 오른쪽 6칸 정렬하여 출력


10. 문자열 (string)

문자열은 문자형(char)의 집합이기 때문에
"Hello"를 저장하기 위해서는 문자 5개가 나열되어 있으면 된다.
  * 내부적으로는 문자 6개 나열이 필요하다
   -> 실제 문자열의 길이보다 1칸이 더 필요

char a = '!'; // 일반 문자형
char b[6] = "Hello"; // 문자열

char 문자열이름[필요한칸수] = "문자열";

printf("%s", b); // Hello

문자열은 문자형의 나열이기 때문에 분리가 가능

printf("%c", b[0]); // H
printf("%c", b[1]); // e

char b[6]은 b[0]부터 b[5]까지
  0 1 2 3 4 5 <- 인덱스 번호 (index)
b H e l l o ? <- '\0' (= 널 문자 null character)

- 널 문자는 문자열이 종료되었음을 표현

int a = 10;
int b = a;


문자열은 처음 선언할 때에만 =를 이용해 값을 대입할 수 있음
char a[6] = "Hello";
char b[6];

#include <string.h> 를 맨 위에 추가
strcpy() 함수 사용

b = "Hello"; (X)
strcpy(b, "Hello"); (O)

strlen(b) -> 문자열의 실제 길이를 센다
sizeof(b) -> 문자열을 저장할 수 있는 칸의 수

strcmp("apple", "apple") -> 같으면 0
strcmp("grape", "apple") -> 1
strcmp("apple", "grape") -> -1
-> 앞쪽에 있는 문자열이 뒤쪽에 있는 문자열보다 사전 순으로 늦게 나올 경우 1
-> 반대는 -1


11. scanf 문자열 입력

scanf 에서 사용하는 %s로 문자열을 입력받을 때는 토큰 단위로 입력을 받는다.
토큰 = 단어

토큰을 구분하는 문자 -> 띄어쓰기, 엔터, 탭